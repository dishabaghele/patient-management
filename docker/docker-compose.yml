services:
  # PostgreSQL Database for Patient Service
  patient-service-db:
    image: postgres:17-alpine
    container_name: patient-service-db
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - ./volumes/patient-service-db:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - patient_management_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin_user} -d ${POSTGRES_DB:-db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kafka Service
  kafka:
    image: bitnami/kafka:latest
    container_name: patient-kafka
    restart: unless-stopped
    ports:
      - "9095:9092"  # External access (using 9095 to avoid conflicts)
      - "9096:9093"  # Controller port
    environment:
      # KRaft mode configuration
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@patient-kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      # Listeners configuration
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://patient-kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

      # Topic configuration
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1

      # Log configuration
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS=300000

      # Additional settings for stability
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
    volumes:
      - ./volumes/kafka-data:/bitnami/kafka
    networks:
      - patient_management_network
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: patient-kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=patient-kafka-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=patient-kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - patient_management_network

  # Patient Service
  patient-service:
    build:
      context: ../patient-service
      dockerfile: Dockerfile
    container_name: patient-service
    restart: unless-stopped
    ports:
      - "${PATIENT_SERVICE_PORT:-4000}:4000"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-docker}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://patient-service-db:5432/${POSTGRES_DB:-db}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER:-admin_user}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-password}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=${DDL_AUTO:-update}
      - SPRING_JPA_SHOW_SQL=${SHOW_SQL:-true}
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_SQL_INIT_MODE=${SPRING_SQL_INIT_MODE:-always}
      - BILLING_SERVICE_ADDRESS=billing-service
      - BILLING_SERVICE_GRPC_PORT=9001
      - SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=true
      - SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION=${SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION:-true}
      - SERVER_PORT=4000
      - LOGGING_LEVEL_COM_PATIENTMANAGEMENT=${LOG_LEVEL:-DEBUG}
      - LOGGING_LEVEL_ORG_HIBERNATE_SQL=DEBUG
      - LOGGING_LEVEL_ORG_HIBERNATE_TYPE_DESCRIPTOR_SQL_BASICBINDER=TRACE
      - LOGGING_LEVEL_ROOT=INFO
      # Kafka configuration for patient service
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=patient-kafka:9092
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer       # ✅ Keep as String
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.apache.kafka.common.serialization.ByteArraySerializer  # ✅ Change to ByteArray
      - SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer    # ✅ Keep as String
      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.apache.kafka.common.serialization.ByteArrayDeserializer # ✅ Change to ByteArray
      - SPRING_KAFKA_CONSUMER_GROUP_ID=patient-service-group
    depends_on:
      patient-service-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - patient_management_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Billing Service (gRPC)
  billing-service:
    build:
      context: ../billing-service
      dockerfile: Dockerfile
    container_name: billing-service
    restart: unless-stopped
    ports:
      - "4001:4001"  # HTTP port if any
      - "9001:9001"  # gRPC port
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-docker}
      - SERVER_PORT=4001
      - LOGGING_LEVEL_COM_BILLINGSERVICE=${LOG_LEVEL:-DEBUG}
      # Kafka configuration for billing service
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=patient-kafka:9092
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer       # ✅ Keep as String
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.apache.kafka.common.serialization.ByteArraySerializer  # ✅ Change to ByteArray
      - SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer    # ✅ Keep as String
      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.apache.kafka.common.serialization.ByteArrayDeserializer # ✅ Change to ByteArray
      - SPRING_KAFKA_CONSUMER_GROUP_ID=billing-service-group
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - patient_management_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4001/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  analytics-service:
    build:
      context: ../analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    restart: unless-stopped
    ports:
      - "4002:4002"  # HTTP port if any
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-docker}
      - SERVER_PORT=4002
      - LOGGING_LEVEL_COM_ANALYTICSSERVICE=${LOG_LEVEL:-DEBUG}
      # Kafka configuration for patient service
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=patient-kafka:9092
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer       # ✅ Keep as String
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.apache.kafka.common.serialization.ByteArraySerializer  # ✅ Change to ByteArray
      - SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer    # ✅ Keep as String
      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.apache.kafka.common.serialization.ByteArrayDeserializer # ✅ Change to ByteArray
      - SPRING_KAFKA_CONSUMER_GROUP_ID=analytics-service-group
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - patient_management_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:4002/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s


networks:
  patient_management_network:
    driver: bridge
    name: ${NETWORK_NAME:-patient_management_network}

volumes:
  patient_service_data:
    driver: local